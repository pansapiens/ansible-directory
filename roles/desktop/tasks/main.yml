---
# tasks file for desktop

- include: find-ubuntu-flavor.yml
  tags: [always]

# Add repos
- name: Add multiverse repo
  apt_repository: repo="{{item}}" update_cache=false
  when: ansible_distribution == 'Ubuntu'
  with_items:
    - 'deb http://archive.ubuntu.com/ubuntu {{ubuntu_release}} multiverse'
    - 'deb-src http://archive.ubuntu.com/ubuntu {{ubuntu_release}} multiverse'
    - 'deb http://archive.ubuntu.com/ubuntu {{ubuntu_release}}-updates multiverse'
    - 'deb-src http://archive.ubuntu.com/ubuntu {{ubuntu_release}}-updates multiverse'

- name: Add Canonical Archive Repo
  apt_repository: repo='deb http://archive.canonical.com/ {{ ubuntu_release }} partner' state=present filename='canonical-archive'

- name: Add Java PPA (ppa:webupd8team/java)
#  apt_repository: repo='ppa:webupd8team/java'
  command: apt-add-repository -y ppa:webupd8team/java

- name: Add Ubuntu Make PPA
# apt_repository: repo='ppa:ubuntu-desktop/ubuntu-make'
  command: apt-add-repository -y ppa:ubuntu-desktop/ubuntu-make

- name: Add Google repo key
  apt_key: url=https://dl.google.com/linux/linux_signing_key.pub

- name: Add Google Chrome repo
  apt_repository: repo='deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' state=present filename='google-chrome'

- name: Add Google Talk Plugin repo
  apt_repository: repo='deb http://dl.google.com/linux/talkplugin/deb/ stable main' state=present filename='google-talkplugin'

- name: Add Spotify repo
  apt_repository: repo='deb http://repository.spotify.com stable non-free' state=present filename='spotify'

- name: Add Firefox Aurora (Developer Edition) PPA (ppa:ubuntu-mozilla-daily/firefox-aurora)
# apt_repository: repo='ppa:ubuntu-mozilla-daily/firefox-aurora'
  command: apt-add-repository -y ppa:ubuntu-mozilla-daily/firefox-aurora

#####

- name: Update APT cache
  apt: update_cache=yes cache_valid_time=3600

- name: Safe apt-get upgrade
  apt: upgrade=safe

- name: Install base development/server packages
  apt: pkg={{item}} state=present
  with_items:
    - mosh
    - openssh-server
    - samba
    - samba-common
    - smbclient
    - samba-vfs-modules
    - build-essential
    - git
    - python-pip
    - python3-pip
    - virtualenvwrapper
    - ubuntu-make
    - vim
    - htop
    - byobu
    - ipython
    - at
    - aria2
    - microcode.ctl
    - intel-microcode
    - ppa-purge
    - python-dev
    - python3-dev
    - curl
    - ncftp
    - nmap
    - gedit
    - xrdp
    - runc
    - speedtest-cli
    - golang-go
# TODO: Split TOR stuff into it's own task
    - tor
    - torsocks
    - torbrowser-launcher
    - socat
    - tor-geoipdb

- name: Install desktop packages
  apt: pkg={{item}} state=present
  with_items:
    - vlc
    - gimp
    - blender
    - vim-gnome
    - gparted
    - nautilus-actions
    - gksu
    - ubuntu-restricted-extras
    - humanity-icon-theme

- name: Remove packages I don't use
  apt: pkg={{item}} state=absent purge=yes
  with_items:
    - evolution
    - rhythmbox
    - empathy
    - gnome-photos
    - gnome-contacts
    - gnome-calendar
    - gnome-mines
    - gnome-sudoku
    - aisleriot
    - totem
    - deja-dup
    - thunderbird

#- name: Install Steam
#  apt: pkg={{item}} state=present
#  with_items:
#    - steam

# TODO: Need to deal with some interactive dpkg-configure options here
#       before we can automatically install this.
#- name: Install localepurge
#  apt: pkg={{item}} state=present
#  with_items:
#    - localepurge

- name: Install the 'grin' tool
  tags: [dev]
  pip: name=grin state=latest
  become: true

- name: Accept Oracle Java license
  debconf: name='oracle-java8-installer' question='shared/accepted-oracle-license-v1-1' value='true' vtype='select'
#  shell: echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections

- name: Install Oracle Java 8
  apt: pkg={{item}} state=present
  with_items:
    - oracle-java8-installer
    - oracle-java8-set-default

- name: Install Ubuntu Make from PPA
  tags: [dev]
  apt: pkg={{item}} state=present
  with_items:
    - ubuntu-make

# - name: Install Google Chrome
#   command: wget -O /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb; dpkg -i /tmp/google-chrome-stable_current_amd64.deb

- name: Install Googe Chrome (stable)
  tags: [browser]
  apt: pkg={{item}} state=present
  with_items:
    - google-chrome-stable

- name: Install Spotify
  tags: [music]
  apt: pkg={{item}} allow_unauthenticated=true state=present
  with_items:
    - spotify-client

- name: Install Google Talk Plugin
  apt: pkg={{item}} state=present
  with_items:
    - google-talkplugin

- stat: path=/home/{{main_user}}/programs
  register: programs_folder

- name: Create 'programs' dir for Ubuntu Make installations
  file: path=/home/{{main_user}}/programs
        state=directory
        mode="u+rwx,o-rwx"
  when: programs_folder.stat.exists == False

- include: pypy.yml
  tags: [dev, pypy, python]

- include: nodejs.yml
  tags: [dev, nodejs]

- include: rstudio.yml
  tags: [rstudio, rlang]

- include: deluge.yml
  tags: [torrents, deluge]

- include: nvidia-video-driver.yml
  tags: [gaming, nvidia]

- include: steam.yml
  tags: [gaming, steam]

- include: itchio.yml
  tags: [gaming, itchio]

- include: pycharm-professional-umake.yml
  tags: [dev, pycharm]

- include: visual-studio-code-deb.yml
  tags: [dev, vscode]

#- include: smartgit.yml
#  tags: [dev, smartgit]

- include: gitkraken.yml
  tags: [dev, gitkraken]

- include: terminal_theme.yml
# - include: erlang-elixir.yml
# - include: crashplan.yml

- include: firefox-developer-edition-umake.yml
  tags: [dev, firefox, browser]

# - include: jetbrains-toolbox.yml
- include: dropbox.yml
  tags: [dropbox]

- include: openshot.yml
  tags: [video, openshot]

- include: etcher.yml
  tags: [etcher]

# No longer required, using Galaxy role angstwad.docker_ubuntu instead
# - include: docker.yml

# sudo usermod -aG docker $USER
- name: Add primary user to the 'docker' group
  user: name={{main_user}} groups=docker append=yes

# - include: mono-xamarin.yml
# - incliude: dotnet-core.yml

# Add line:
# PATH=$PATH:${HOME}/.local/bin
# to ~/.bashrc for the main_user
# if not present
